/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;


import dao.FactoryDaoImp;
import dto.Robot;
import dto.Weapon;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.GraphicsEnvironment;
import java.awt.LayoutManager;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Queue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author adoha
 */
public class FactoryView extends javax.swing.JFrame {

    public FactoryDaoImp robotManager;
    public Queue<Robot> robotQueue;
    public Timer timer;
    public String lastRobotId;
    public boolean orderQueue;

    public FactoryView() {
        initComponents();

        try {
            Font font = Font.createFont(Font.TRUETYPE_FONT, getClass().getClassLoader().getResourceAsStream("digital-7.ttf"));
            font = font.deriveFont(Font.PLAIN, 50);

            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(font);

            lblQuantity.setFont(font);
        } catch (FontFormatException ex) {
            Logger.getLogger(FactoryView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FactoryView.class.getName()).log(Level.SEVERE, null, ex);
        }

        setLocationRelativeTo(null);
        setTitle("Linea de Producción de Robots Ninjas Asesinos");
        jplRobotContainer.setAlignmentY(RIGHT_ALIGNMENT);
        
        //jplRobotContainer.setLayout(new javax.swing.BoxLayout(jplRobotContainer, javax.swing.BoxLayout.X_AXIS));
        customInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlpMain = new javax.swing.JLayeredPane();
        lblClaw = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        lblPanel = new javax.swing.JLabel();
        lblNinjaOMatic = new javax.swing.JLabel();
        jplDispatchContainer = new javax.swing.JPanel();
        jplRobotContainer1 = new javax.swing.JPanel();
        jplRobotContainer = new javax.swing.JPanel();
        lblConveyorBelt = new javax.swing.JLabel();
        btnCredits = new javax.swing.JButton();
        btnSwitch = new javax.swing.JButton();
        btnOrderQueue = new javax.swing.JButton();
        btnCreateRobot = new javax.swing.JButton();
        btnDispatchById = new javax.swing.JButton();
        btnDispatch = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        lblBackground = new javax.swing.JLabel();
        lblFreakedHipster = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(975, 720));
        setResizable(false);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jlpMain.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblClaw.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/claw.png"))); // NOI18N
        jlpMain.add(lblClaw, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, -220, -1, -1));

        lblQuantity.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        lblQuantity.setForeground(new java.awt.Color(51, 153, 0));
        lblQuantity.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblQuantity.setToolTipText("Cantidad de Robots Ninjas Asesinos en espera de ser despachados");
        jlpMain.add(lblQuantity, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 34, 130, 50));

        lblPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/panel.png"))); // NOI18N
        lblPanel.setToolTipText("");
        jlpMain.add(lblPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 130));

        lblNinjaOMatic.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ninjaOMatic.png"))); // NOI18N
        jlpMain.add(lblNinjaOMatic, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 0, -1, -1));

        jplDispatchContainer.setOpaque(false);

        javax.swing.GroupLayout jplDispatchContainerLayout = new javax.swing.GroupLayout(jplDispatchContainer);
        jplDispatchContainer.setLayout(jplDispatchContainerLayout);
        jplDispatchContainerLayout.setHorizontalGroup(
            jplDispatchContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1140, Short.MAX_VALUE)
        );
        jplDispatchContainerLayout.setVerticalGroup(
            jplDispatchContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jlpMain.add(jplDispatchContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, 180, 1140, 220));

        jplRobotContainer1.setOpaque(false);

        javax.swing.GroupLayout jplRobotContainer1Layout = new javax.swing.GroupLayout(jplRobotContainer1);
        jplRobotContainer1.setLayout(jplRobotContainer1Layout);
        jplRobotContainer1Layout.setHorizontalGroup(
            jplRobotContainer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );
        jplRobotContainer1Layout.setVerticalGroup(
            jplRobotContainer1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jlpMain.add(jplRobotContainer1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, 180, 800, 220));

        jplRobotContainer.setAlignmentY(0.0F);
        jplRobotContainer.setOpaque(false);
        jlpMain.add(jplRobotContainer, new org.netbeans.lib.awtextra.AbsoluteConstraints(-170, 180, 800, 220));

        lblConveyorBelt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/conveyorBeltA.png"))); // NOI18N
        jlpMain.add(lblConveyorBelt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, 970, -1));

        btnCredits.setText("Créditos");
        btnCredits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreditsActionPerformed(evt);
            }
        });
        jlpMain.add(btnCredits, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 520, 110, 30));

        btnSwitch.setText("Switch Robots");
        btnSwitch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchActionPerformed(evt);
            }
        });
        jlpMain.add(btnSwitch, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 520, 120, 30));

        btnOrderQueue.setText("Ordenar por ID");
        btnOrderQueue.setToolTipText("Ascendente / Descendente");
        btnOrderQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOrderQueueActionPerformed(evt);
            }
        });
        jlpMain.add(btnOrderQueue, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 520, 130, 30));

        btnCreateRobot.setText("Crear Robot");
        btnCreateRobot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateRobotActionPerformed(evt);
            }
        });
        jlpMain.add(btnCreateRobot, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 570, 110, 30));

        btnDispatchById.setText("Destruir por ID");
        btnDispatchById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispatchByIdActionPerformed(evt);
            }
        });
        jlpMain.add(btnDispatchById, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 570, 130, 30));

        btnDispatch.setText("Despachar Robot");
        btnDispatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDispatchActionPerformed(evt);
            }
        });
        jlpMain.add(btnDispatch, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 570, 120, 30));

        jButton1.setText("Agregar Ordenado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jlpMain.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 650, 130, 30));

        jButton2.setText("Hipsters que serán buenos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jlpMain.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(649, 650, -1, 30));

        jButton3.setText("Mostrar por ID");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jlpMain.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 650, 110, 30));
        jlpMain.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 630, 420, 10));

        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/factoryBackground.png"))); // NOI18N
        jlpMain.add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 720));

        lblFreakedHipster.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/freakedHipster2.gif"))); // NOI18N
        jlpMain.add(lblFreakedHipster, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 503, 480, 210));

        getContentPane().add(jlpMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDispatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispatchActionPerformed
        Component robot = null;
        if (timer != null) {
            timer.stop();
            lblNinjaOMatic.setIcon(new ImageIcon(getClass().getResource("/images/ninjaOMatic.png")));
            lblConveyorBelt.setIcon(new ImageIcon(getClass().getResource("/images/conveyorBeltA.png")));
            jlpMain.remove(lblFreakedHipster);
            jplRobotContainer1.removeAll();
            jplDispatchContainer.removeAll();
            repaint();
        }
        //displayRobots();
        String robotId = "lblRobot" + ((Robot) robotQueue.toArray()[0]).getId();
        Robot robot2 = ((Robot) robotQueue.toArray()[0]);
        for (Component component : jplRobotContainer.getComponents()) {
            if (((JLabel) component).getName().equals(robotId)) {
                robot = component;
                jplDispatchContainer.add(robot);
                //System.out.println(((JLabel) component).getName());

                timer = new Timer(10, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        
                        for (Component component1 : jplRobotContainer.getComponents()) {
                            if (!((JLabel) component1).getName().equals(robotId) && component.getLocation().x <= 797) {
                                component1.setLocation(component1.getLocation().x +1, component1.getLocation().y);
                            }

                        }
                        component.setLocation(component.getLocation().x + 1, component.getLocation().y);
                        getContentPane().repaint();
                        
                        if (component.getLocation().x >= 800) {
                            lblNinjaOMatic.setIcon(new ImageIcon(getClass().getResource("/images/ninjaOMaticAnimated.gif")));
                            
                            ((JLabel) component).setIcon(new ImageIcon(getClass().getResource("/images/ninja" + robot2.getWeapon() + ".gif")));
                            if (component.getLocation().x >= 950) {
                                lblNinjaOMatic.setIcon(new ImageIcon(getClass().getResource("/images/ninjaOMatic.png")));
                                
                            }
                            if (component.getLocation().x >= 1100) {
                                timer.stop();
                                lblConveyorBelt.setIcon(new ImageIcon(getClass().getResource("/images/conveyorBeltA.png")));
                                jlpMain.remove(lblFreakedHipster);
                                jplDispatchContainer.removeAll();
                                displayRobots();
                                repaint();
                            }
                        }
                    }
                });

                lblConveyorBelt.setIcon(new ImageIcon(getClass().getResource("/images/conveyorBeltAnimated.gif")));
                try{
                jlpMain.add(lblFreakedHipster,0);
                } catch(Exception e) {
                    System.out.println(e.getMessage());
                }
                //lblFreakedHipster.setVisible(true);
                repaint();
                //pack();
                timer.start();
                
                lastRobotId = robotId;
                break;

            }
        }
        robotManager.AttendFirst();
    }//GEN-LAST:event_btnDispatchActionPerformed

    private void btnDispatchByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDispatchByIdActionPerformed
        String input = JOptionPane.showInputDialog("Ingrese un Id");

        int id = 0;

        try {
            if (input.equals("")) {
                throw new Exception("Se necesita una Id");
            }

            id = Integer.parseInt(input.trim());
            if(id < 0)
                throw new Exception("ID tiene que ser mayor a 0");
            if(robotManager.DestroyById(id))
                JOptionPane.showMessageDialog(null, "Robot Ninja Asesino Destruído");
            else
                JOptionPane.showMessageDialog(null, "No se encontro un Robot Ninja Asesino con ese ID");
            
            /*Queue beforeDispatched = new Queue();
            
            for (int i = jplRobotContainer.getComponentCount() - 1; i >= 0 ; i--) {
                if(!jplRobotContainer.getComponent(i).getName().equals("lblRobot" + id))
                    beforeDispatched.QueueUp(jplRobotContainer.getComponent(i));
                else
                    break;
            }
            
            for (int i = 0; i < beforeDispatched.getSize(); i++){
                JLabel robot = (JLabel)beforeDispatched.GetByIndex(i);

                robot.setLocation(robot.getLocation().x - 170, robot.getLocation().y + 175);

                try{
                jlpMain.add(robot,0);
                }catch(Exception e) {}
                
                /*JLabel claw = new JLabel();
                claw.setIcon(new ImageIcon(getClass().getResource("/images/claw.png")));
                claw.setName("lblClaw" + robot.getName().substring(3));

                jPanel1.add(claw,0);
                jPanel1.revalidate();
            }
            timer = new Timer(1, new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        for (int i = 0; i < beforeDispatched.getSize(); i++) {
                            JLabel robot = (JLabel)beforeDispatched.GetByIndex(i);
                        robot.setLocation(robot.getLocation().x, robot.getLocation().y - 1);
                        getContentPane().repaint();
                        if (robot.getLocation().y == -300) {
                            timer.stop();
                            displayRobots();
                            repaint();
                        }
                        }
                    }
                });
            timer.start();*/
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Se necesita que sea un número", "Error", JOptionPane.WARNING_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
        }
        
        displayRobots();

    }//GEN-LAST:event_btnDispatchByIdActionPerformed

    private void btnCreateRobotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateRobotActionPerformed
        OrderRobot order = new OrderRobot(this, true);
        order.setVisible(true);
        Component robot = null;
        if (timer != null) {
            timer.stop();
            lblConveyorBelt.setIcon(new ImageIcon(getClass().getResource("/images/conveyorBeltA.png")));
            jplRobotContainer1.removeAll();
            jplDispatchContainer.removeAll();
            repaint();
        }
        displayRobots();
        if(order.created) {
            String robotId = "lblRobot" + ((Robot) robotQueue.toArray()[(robotQueue.size() - 1)]).getId();

            for (Component component : jplRobotContainer.getComponents()) {
                if (((JLabel) component).getName().equals(robotId) && !((JLabel) component).getName().equals(lastRobotId)) {
                    robot = component;
                    Point location = component.getLocation();
                    //jlpMain.add(component);
                    LayoutManager layout = jplRobotContainer.getLayout();
                    //jplRobotContainer.setLayout(null);
                    component.setLocation(0, component.getLocation().y);
                    jplRobotContainer1.add(robot);
                    System.out.println(((JLabel) component).getName());
                    timer = new Timer(1, new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            component.setLocation(component.getLocation().x + 1, component.getLocation().y);
                            getContentPane().repaint();
                            if (component.getLocation().x == location.x) {
                                timer.stop();
                                lblConveyorBelt.setIcon(new ImageIcon(getClass().getResource("/images/conveyorBeltA.png")));
                                jplRobotContainer1.removeAll();
                                displayRobots();
                                repaint();
                            }
                        }
                    });
                    lblConveyorBelt.setIcon(new ImageIcon(getClass().getResource("/images/conveyorBeltAnimated.gif")));
                    repaint();
                    timer.start();
                    lastRobotId = robotId;
                    break;

                }
            }
        }
    }//GEN-LAST:event_btnCreateRobotActionPerformed

    private void btnOrderQueueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOrderQueueActionPerformed
        robotManager.SortById(robotQueue, robotQueue.size());
        /*if (orderQueue) {
            orderQueue = false;
            robotManager.SortById(0);
        } else {
            orderQueue = true;
            robotManager.SortById(1);
        }*/
        displayRobots();
        repaint();
    }//GEN-LAST:event_btnOrderQueueActionPerformed

    private void btnSwitchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchActionPerformed
        String input1;
        String input2;

        int id1 = 0;
        int id2 = 0;

        try {
            input1 = JOptionPane.showInputDialog("Ingrese el primer Id");
            if (input1.equals("") || input1 == null) {
                throw new Exception("Se necesita una Id");
            }

            id1 = Integer.parseInt(input1.trim());
            if(id1 < 1)
                throw new Exception("ID tiene que ser mayor a 0");
            //dispose();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Se necesita que sea un número", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            input2 = JOptionPane.showInputDialog("Ingrese el segundo Id");
            if (input2.equals("") || input2 == null) {
                throw new Exception("Se necesita una Id");
            }

            id2 = Integer.parseInt(input2.trim());
            if(id2 < 1)
                throw new Exception("ID tiene que ser mayor a 0");
            //dispose();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Se necesita que sea un número", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        try {
            robotManager.switchRobotId(id1, id2);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo realizar un cambio con esas IDs", "Error", JOptionPane.WARNING_MESSAGE);
        }
        displayRobots();
    }//GEN-LAST:event_btnSwitchActionPerformed

    private void btnCreditsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreditsActionPerformed
        JOptionPane.showMessageDialog(null,
                "Realizado por:\n\n- Adolfo Astudillo Del Río\n- Sebastián Muñoz Vergara\n"
                + "----------------------------------------------\n"
                + "Gracias a:\n\n"
                + "- Artwork por Mikoto-Tsuki (Hermana de Sebastián. También gracias a su paciencia) \n\n"
                + "- Enzo López. Proveedor de su imagen para basar al hipster asustado\n"
                + "----------------------------------------------\n"
                + "Realizado para:\n\n"
                + "- Clase Diseño de Estructuras de Datos\n"
                + "- Sección 2\n"
                + "- Profesor Juan Cubillos\n"
                + "- Carrera Analista Programador Computacional\n"
                + "- Duoc UC, Sede Padre Alonso de Ovalle 2017"
                );
    }//GEN-LAST:event_btnCreditsActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        OrderRobot order = new OrderRobot(this, true);
        order.setVisible(true);
        robotManager.SortById(robotQueue, robotQueue.size());
        displayRobots();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JOptionPane.showMessageDialog(null, robotManager.sumCanKillXHipsters(robotQueue, robotQueue.size(), 0, 0));
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            int id = Integer.parseInt(JOptionPane.showInputDialog(null,"Ingresar ID del robot a mostrar").trim());
            if(id < 0) {
                JOptionPane.showMessageDialog(null, "ID debe ser mayor a 0");
                return;
            }
            if(robotManager.buscarPorId(robotQueue, id, robotQueue.size(), 0) == -1){
                JOptionPane.showMessageDialog(null, "No se encontró un robot con esa ID");
                return;
            }
            Robot robot = (Robot)robotQueue.toArray()[robotManager.buscarPorId(robotQueue, id, robotQueue.size(), 0)];
            if(robot != null) {
                System.out.println(robot.getWeapon());
                JOptionPane.showMessageDialog(null, "ID: " + robot.getId() + "\nArma: " + robot.getWeapon() + "\nValido por " + robot.getCanKillXHipsters() + " hipsters", "Elemento Mínimo", HEIGHT, new ImageIcon(getClass().getResource("/images/robot" + robot.getWeapon() + ".gif")));
            }
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "El ID necesita ser un número:  " + ex.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FactoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FactoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FactoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FactoryView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FactoryView().setVisible(true);
            }
        });
    }

    private void customInit() {
        jplRobotContainer.setLayout(new FlowLayout(FlowLayout.RIGHT));
        robotManager = new FactoryDaoImp();
        robotQueue = robotManager.factoryQueue;
        //testerInit();
        displayRobots();

    }

    private void testerInit() {
        for (int i = 0; i < 3; i++) {
            robotManager.Create(new Robot(i, Weapon.Katana, i * 100));
        }

        getContentPane().repaint();
    }

    private void displayRobots() {
        jplRobotContainer.removeAll();
        
        //for (int i = robotQueue.getSize() - 1; i >= 0 && i < 7 ; i--) {
        for (int i = 0; i < robotQueue.size() && i < 5; i++) {
            Robot robot = (Robot) robotQueue.toArray()[i];
            JLabel robotLabel = new JLabel();
            robotLabel.setName("lblRobot" + robot.getId());
            robotLabel.setToolTipText(
                    "<html>&#9656; <b>ID</b>: " + robot.getId() + "<br />"
                    + "&#9656; <b>Arma</b>: " + robot.getWeapon() + "<br />"
                    + "&#9656; <b>Valido por:</b> " + robot.getCanKillXHipsters() + " hipsters </html>");
            robotLabel.setIcon(new ImageIcon(getClass().getResource("/images/robot" + robot.getWeapon() + ".gif")));
            robotLabel.setPreferredSize(new Dimension(150, 220));
            robotLabel.setAlignmentX(BOTTOM_ALIGNMENT);
            robotLabel.setAlignmentX(Component.BOTTOM_ALIGNMENT);
            
            
            jplRobotContainer.add(robotLabel, 0);
         
        }
        lblQuantity.setText(String.valueOf(robotQueue.size()));

        revalidate();
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateRobot;
    private javax.swing.JButton btnCredits;
    private javax.swing.JButton btnDispatch;
    private javax.swing.JButton btnDispatchById;
    private javax.swing.JButton btnOrderQueue;
    private javax.swing.JButton btnSwitch;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLayeredPane jlpMain;
    private javax.swing.JPanel jplDispatchContainer;
    private javax.swing.JPanel jplRobotContainer;
    private javax.swing.JPanel jplRobotContainer1;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblClaw;
    private javax.swing.JLabel lblConveyorBelt;
    private javax.swing.JLabel lblFreakedHipster;
    private javax.swing.JLabel lblNinjaOMatic;
    private javax.swing.JLabel lblPanel;
    private javax.swing.JLabel lblQuantity;
    // End of variables declaration//GEN-END:variables
}
